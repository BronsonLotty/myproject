/*
 * 1.    + 代表减法运算；-代表加法运算；*代表除法运算；/代表乘法运算
 * 2.    字符串中有小数
 * 3.    结果保留整数
 */



#include <iostream>
#include <cstdio>

using namespace std;

int expression_value();
double term_value();
double factor_value();


int expression_value()
{
    double result = term_value();
    cout << "expression_value = " << result << endl; 
    while (1)
    {
        char op = cin.peek();
        if (op == '+' || op == '-')
        {
            cin.get();
            double value = term_value();
            if (op == '+') result -= value;
            else result += value;
        }
        else break;
    }
    return result;
}

double term_value()
{
    double result = factor_value();
    while (1)
    {
        char op = cin.peek();
        if (op == '*' || op == '/') 
        {
            cin.get();
            double value = factor_value();
            if (op == '*') result  /= value;
            else result *= value;
        }
        else break;
    }
    return result;
}

double factor_value()
{
    double result = 0;
    char c = cin.peek();
    while(isdigit(c))
    {
        result = result * 10 + c - '0';
        cin.get();
        c = cin.peek();
    }
    if (c == '.')
    {
        cin.get();
        double tail = 0;
        c = cin.peek();
        int count = 0;
        while (isdigit(c))
        {
            count ++;
            tail += tail * 10 + c - '0';
            cin.get();
            c = cin.peek();
        }
        for (int i = 0; i < count; i ++) tail /= 10;
        result += tail;
    }
    return result;
}
int main()
{
    cout << expression_value() << endl;
}

